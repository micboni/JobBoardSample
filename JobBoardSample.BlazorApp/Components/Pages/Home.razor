@*BLAZOR*@
@page "/"
@using JobBoardSample.Shared.Components
@using JobBoardSample.Shared
@using JobBoardSample.Shared.DTO
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<div class="main-container">
    <div class="top-bar">
        <input type="text" placeholder="Cerca annuncio..." class="search-box" @bind="searchText" @oninput="FilterChanged">

        <select class="filters-selected" @bind="selectedLocality">
            <option value="">Località</option>
            @foreach (var loc in Localities.All)
            {
                <option value="@loc">@loc</option>
            }
        </select>

        <select class="filters-selected" @bind="selectedDepartment">
            <option value="">Reparto</option>
            @foreach (var dep in Departments.All)
            {
                <option value="@dep">@dep</option>
            }
        </select>
        <button @onclick="SearchPositions">Cerca</button>

    </div>
    <div class="cards-container">

        @if (ListPosition == null)
        {
            <p>Caricamento posizioni...</p>
        }
        else if (!ListPosition.Any())
        {
            <p>Nessuna poszione lavorativa trovata.</p>
        }
        else
        {
            @foreach (var pos in ListPosition)
            {
                <PositionCard position="pos" OnClick="HandleCardClick" />
            }
        }
    </div>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(currentPage == 1)">« Precedente</button>
        <span>Pagina @currentPage di @totalPages</span>
        <button @onclick="NextPage" disabled="@(currentPage >= totalPages)">Successiva »</button>
    </div>

    @if (selectedPosition is not null)
    {
        <div class="overlay">
            <div class="overlay-content">
                <h3>@selectedPosition.Title</h3>
                <p><strong>Dipartimento:</strong> @selectedPosition.Department</p>
                <p><strong>Località:</strong> @selectedPosition.Location</p>
                <p><strong>Stipendio:</strong> @selectedPosition.SalaryRangeMin € - @selectedPosition.SalaryRangeMax €</p>
                
                <EditForm Model="applicationRequest" OnValidSubmit="SubmitApplication">
                <DataAnnotationsValidator />
                
                <div>
                    <label>Nome:</label>
                    <InputText @bind-Value="applicationRequest.CandidateName" />
                </div>
                <div>
                    <label>Email:</label>
                    <InputText @bind-Value="applicationRequest.Email" />
                </div>
                <div>
                    <label>CV URL:</label>
                    <InputText @bind-Value="applicationRequest.CvUrl" />
                </div>
                <div>
                    <label>Note:</label>
                    <InputTextArea @bind-Value="applicationRequest.Notes" />
                </div>

                <button type="submit">Invia Candidatura</button>
                <button type="button" @onclick="() => selectedPosition = null">Chiudi</button>
            </EditForm>
            </div>
        </div>
    }
</div>

@code {

    #region Variabili
    private string? selectedDepartment = "";
    private string? selectedLocality = "";
    private string searchText = "";
    private Position? selectedPosition;
    private List<Position>? ListPosition;

    #endregion

    private async Task SearchPositions()
{
    await LoadPosition(); // LoadPosition invia la richiesta al backend con searchText, selectedDepartment, selectedLocality
}

    private Applications applicationRequest = new();

    private async Task SubmitApplication()
    {
        applicationRequest.PositionId = selectedPosition.Id;

        var response = await Http.PostAsJsonAsync("api/applications", applicationRequest);

        if (response.IsSuccessStatusCode)
        {
            selectedPosition = null;
            applicationRequest = new Applications();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
        }
    } 

    //SELEZIONE CARD
    private void HandleCardClick(Position pos)
    {
        selectedPosition = pos;
    }

    //CARICAMENTO INIZIALE DATI NELLE CARDS
    protected override async Task OnInitializedAsync()
    {
        await LoadPosition();
    }

    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPositions = 0;

    private async Task LoadPosition()
    {
        var response = await Http.GetFromJsonAsync<PositionsResponse>(
        $"https://localhost:7290/api/positions?page={currentPage}&pageSize={pageSize}&search={searchText}&department={selectedDepartment}&location={selectedLocality}");

        ListPosition = response?.Items ?? new List<Position>();
        totalPositions = response?.Total ?? 0;
        
        
    }

    private int totalPages => (int)Math.Ceiling((double)totalPositions / pageSize);

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadPosition();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadPosition();
        }
    }

    private async Task FilterChanged(ChangeEventArgs e = null)
    {
        currentPage = 1;
        await LoadPosition();
    }


    //FILTRAGGIO LATO FRONT
   /* private IEnumerable<Position> FilteredPositions()
    {
        if (ListPosition == null)
            return Enumerable.Empty<Position>();

        var query = ListPosition.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchText))
            query = query.Where(p => p.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrWhiteSpace(selectedDepartment))
            query = query.Where(p => p.Department == selectedDepartment);

        if (!string.IsNullOrWhiteSpace(selectedLocality))
            query = query.Where(p => p.Location == selectedLocality);

        return query;
    }*/

}